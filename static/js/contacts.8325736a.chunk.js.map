{"version":3,"file":"static/js/contacts.8325736a.chunk.js","mappings":"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","sources":["shared/page/PageWrapper.tsx","core/domain/user/endpoints.ts","shared/placeholders/EmptyDataPlaceholder.tsx","pages/contacts/table/TableBodyRows.tsx","pages/contacts/table/Table.tsx","pages/contacts/utils.ts","pages/contacts/ContactsPage.tsx"],"sourcesContent":["import { styled } from '@mui/material';\nimport * as React from 'react';\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PageWrapper: React.FC<Props> = (props) => {\n  const { children } = props;\n\n  return <Section>{children}</Section>;\n};\n\nconst Section = styled('section')(({ theme }) => ({\n  padding: theme.spacing(2),\n  position: 'relative',\n  height: '100vh',\n}));\n","import { UserListQueryParams } from './types';\n\nexport const userEndpoints = {\n  list: (params?: UserListQueryParams) => ['users', params],\n};\n","import { Box, BoxProps, Typography } from '@mui/material';\nimport * as React from 'react';\n\ntype Props = { children?: React.ReactNode } & BoxProps;\n\nexport const EmptyDataPlaceholder: React.FC<Props> = (props) => {\n  const { children, ...rest } = props;\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" p={3} {...rest}>\n      <Typography>{children || 'No data available'}</Typography>\n    </Box>\n  );\n};\n","import * as React from 'react';\nimport { TableCell, TableRow } from '@mui/material';\nimport { TableInstance } from 'react-table';\nimport { UserDto } from 'src/core/domain/user';\nimport { EmptyDataPlaceholder } from 'src/shared/placeholders';\n\ntype Props = {\n  tableInstance: TableInstance<UserDto>;\n};\n\nexport const TableBodyRows: React.FC<Props> = (props) => {\n  const {\n    tableInstance: { rows, visibleColumns, prepareRow },\n  } = props;\n\n  const handleRowClick = (user: UserDto) => {\n    console.log(user);\n  };\n\n  if (!rows.length) {\n    return (\n      <tr>\n        <td colSpan={visibleColumns.length}>\n          <EmptyDataPlaceholder />\n        </td>\n      </tr>\n    );\n  }\n\n  return (\n    <>\n      {rows.map((row) => {\n        prepareRow(row);\n        return (\n          <TableRow\n            {...row.getRowProps()}\n            hover\n            onClick={() => handleRowClick(row.original)}\n            sx={{\n              cursor: 'pointer',\n            }}\n          >\n            {row.cells.map((cell) => (\n              <TableCell {...cell.getCellProps()}>{cell.render('Cell')}</TableCell>\n            ))}\n          </TableRow>\n        );\n      })}\n    </>\n  );\n};\n","import { Box, Table as MuiTable, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@mui/material';\nimport * as React from 'react';\nimport { useQuery } from 'react-query';\nimport { Column, useTable } from 'react-table';\nimport { Pageable } from 'src/core/domain/rest';\nimport { UserDto, userEndpoints } from 'src/core/domain/user';\nimport { filterUsers } from '../utils';\nimport { TableBodyRows } from './TableBodyRows';\n\nexport const columns: Column<UserDto>[] = [\n  {\n    Header: 'Name',\n    accessor: 'first_name',\n    Cell: ({\n      row: {\n        original: { avatar, first_name, last_name },\n      },\n    }) => {\n      const name = `${first_name} ${last_name}`;\n      return (\n        <Box display=\"flex\" alignItems=\"center\">\n          <img src={avatar} alt={`${name} avatar`} width={50} />\n          <Box component=\"span\" marginLeft={1}>\n            {name}\n          </Box>\n        </Box>\n      );\n    },\n  },\n  {\n    Header: 'Email',\n    accessor: 'email',\n  },\n];\n\ntype Props = {\n  query?: string;\n};\n\nexport const Table: React.FC<Props> = (props) => {\n  const { query } = props;\n  const { data } = useQuery<Pageable<UserDto>>(userEndpoints.list());\n  const filteredData = filterUsers(data?.data ?? [], query);\n\n  const tableInstance = useTable({\n    data: filteredData,\n    columns,\n  });\n  const { getTableBodyProps, getTableProps, headerGroups } = tableInstance;\n\n  return (\n    <TableContainer>\n      <MuiTable {...getTableProps()}>\n        {headerGroups.map((headerGroup, index) => (\n          <colgroup key={index}>\n            {headerGroup.headers.map((column) => (\n              <col key={column.id} width={column.width} />\n            ))}\n          </colgroup>\n        ))}\n        <TableHead>\n          {headerGroups.map((headerGroup) => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map((column) => (\n                <TableCell variant=\"head\" {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody {...getTableBodyProps()}>\n          <TableBodyRows tableInstance={tableInstance} />\n        </TableBody>\n      </MuiTable>\n    </TableContainer>\n  );\n};\n","import { UserDto } from 'src/core/domain/user';\n\nexport const filterUsers = (users: UserDto[], query?: string): UserDto[] => {\n  if (!query) {\n    return users;\n  }\n\n  const regex = new RegExp(query, 'i');\n  return users.filter(({ first_name, last_name }) => regex.test(`${first_name} ${last_name}`));\n};\n","import SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment, Paper, TextField, Typography } from '@mui/material';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { PageWrapper } from 'src/shared/page';\nimport { Table } from './table/Table';\n\nexport const ContactsPage: React.FC = () => {\n  const [query, setQuery] = React.useState<string>();\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    // mark as low priority update\n    React.startTransition(() => {\n      setQuery(event.target.value.trim());\n    });\n  };\n\n  return (\n    <PageWrapper>\n      <Helmet>\n        <title>Contacts</title>\n      </Helmet>\n      <Paper\n        sx={{\n          display: 'flex',\n          flexDirection: 'column',\n          zIndex: 1,\n          flexGrow: 1,\n          padding: 2,\n        }}\n      >\n        <Typography variant=\"h5\" gutterBottom>\n          Contacts\n        </Typography>\n\n        <TextField\n          label=\"Search Contacts\"\n          variant=\"outlined\"\n          size=\"small\"\n          margin=\"normal\"\n          fullWidth\n          onChange={handleChange}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position=\"end\">\n                <SearchIcon />\n              </InputAdornment>\n            ),\n          }}\n        />\n        <Table query={query} />\n      </Paper>\n    </PageWrapper>\n  );\n};\n"],"names":["PageWrapper","props","children","Section","styled","padding","theme","spacing","position","height","userEndpoints","params","EmptyDataPlaceholder","rest","Box","display","justifyContent","alignItems","p","Typography","TableBodyRows","tableInstance","rows","visibleColumns","prepareRow","length","map","row","TableRow","getRowProps","hover","onClick","user","original","console","log","sx","cursor","cells","cell","TableCell","getCellProps","render","colSpan","columns","Header","accessor","Cell","avatar","first_name","last_name","name","src","alt","width","component","marginLeft","Table","query","data","useQuery","filteredData","users","regex","RegExp","filter","test","filterUsers","useTable","getTableBodyProps","getTableProps","headerGroups","TableContainer","headerGroup","index","headers","column","id","TableHead","getHeaderGroupProps","variant","getHeaderProps","TableBody","ContactsPage","React","setQuery","Helmet","Paper","flexDirection","zIndex","flexGrow","gutterBottom","TextField","label","size","margin","fullWidth","onChange","event","target","value","trim","InputProps","endAdornment","InputAdornment","Search"],"sourceRoot":""}